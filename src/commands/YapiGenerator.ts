import Generator from './Generator'
import axios, { AxiosInstance, AxiosResponse } from 'axios'
import { formatCode, getAtiConfigs, parseTsCode, removeIndexSignatureMiddleWare } from '../utils'
import { YapiUrls } from '../dict'
import camelCase from 'camelcase'
import { compile, Options } from 'json-schema-to-typescript'

const fs = require('fs-extra')
const ora = require('ora')
const path = require('path')
const consola = require('consola')

// eslint-disable-next-line quotes
const headerContent = `import request from './lib/'`
const footerContent = ({ ...params }) => {
  let { functionName, requestPath, reqName, resName } = params
  // 获取首字母大写的参数名
  const getUpperName = (str) => {
    return str.replace(/([a-zA-Z]{1})(.+)/, (_, str1, str2) => {
      return str1.toUpperCase() + str2
    })
  }
  reqName = getUpperName(reqName)
  resName = getUpperName(resName)
  return `
  export async function ${functionName}(data: ${reqName}): Promise<${resName}> {
    return request('${requestPath}', {
      method: 'post',
      data
    })
  }
  `
}

type CustomInterfaceName = (name: string, type: 'request' | 'response', response: any) => string
interface YapiConfig {
  url: string
  projectId: string
  token: string
  output?: string
  groupId?: string[]
  json2TsOptions?: Partial<Options>
  customInterfaceName?: CustomInterfaceName
  customTemplate?: (
    functionName: string,
    requestPath: string,
    requestInterfaceName: string,
    responseInterfaceName: string,
    paramsContent: string
  ) => string
  prettierConfig?: string
}

export type ApiItem = { path: string; id: number }

const defaultYapiGeneratorConfig: Partial<YapiConfig> = {
  json2TsOptions: {
    bannerComment: `/* tslint:disable */
    /* This file was automatically generated by auto-request-tool.
    * DO NOT MODIFY IT BY HAND.\n*/`
  },
  customInterfaceName: (name, type) => {
    if (type === 'request') {
      return `${name}RequestType`
    } else {
      return `${name}ResponseType`
    }
  },
  prettierConfig: path.join(__dirname, './defaultConfig/prettierConfig.js')
}

class YapiGenerator extends Generator<YapiConfig> {
  request: AxiosInstance

  constructor() {
    super(getAtiConfigs({ output: 'atiOutput' }))
    this.initRequest()
  }

  // 统一request方法
  public initRequest() {
    this.config = Object.assign({}, defaultYapiGeneratorConfig, this.config)
    const atiConfigs = this.config
    const request = axios.create({
      baseURL: atiConfigs.url
    })
    request.interceptors.request.use((config) => {
      if (config.method === 'post') {
        config.data = Object.assign(config.data || {}, {
          token: atiConfigs.token
        })
      } else {
        config.params = Object.assign(config.params || {}, {
          token: atiConfigs.token
        })
      }
      return config
    })
    request.interceptors.response.use(
      (response: AxiosResponse<{ errmsg: string; errcode: number }>) => {
        if (response?.data?.errcode && response?.data?.errmsg) {
          consola.error(response?.data?.errmsg)
        }
        return response
      }
    )
    this.request = request
    return this.request
  }

  // 检查必填配置项
  public checkConfig() {
    const { url, projectId, token } = this.config
    if (!url) {
      consola.error('url is required!')
      return false
    }
    if (!projectId) {
      consola.error('projectId is required!')
      return false
    }
    if (!token) {
      consola.error('token is required!')
      return false
    }
    return true
  }

  // 文件写入工具
  async writeInterfaceToFile({
    ...params
  }: {
    reqContent: string
    resContent: string
    reqName: string
    resName: string
    name: string
    paths: string[]
    requestPath: string
  }) {
    const { reqContent, resContent, reqName, resName, name, paths, requestPath } = params
    let newContent = ''
    const outputRootPath = path.resolve(process.cwd(), `${this.config.output}`)
    if (!fs.existsSync(outputRootPath)) {
      fs.mkdirSync(outputRootPath)
    }
    const fileDirPath = path.resolve(outputRootPath, `${paths[paths.length - 2]}`)
    if (!fs.existsSync(fileDirPath)) {
      fs.mkdirSync(fileDirPath)
    }
    const filePath = `${fileDirPath}/${name}.ts`
    const customTemplate = this.config.customTemplate
    if (customTemplate) {
      newContent = customTemplate(
        name,
        requestPath,
        reqName,
        resName,
        `${reqContent}
      ${resContent}`
      )
    } else {
      newContent = `${headerContent}
        ${reqContent}
        ${resContent}
        ${footerContent({ functionName: name, requestPath, reqName, resName })} 
      `
    }
    const formatedCode = await formatCode(newContent, this.config.prettierConfig as string)
    fs.writeFileSync(filePath, formatedCode, { encoding: 'utf8' })
  }

  customInterfaceName = (name: string, type: 'request' | 'response', response: any) => {
    return this.config?.customInterfaceName?.(name, type, response) || name
  }

  // 生成接口入参和出参的方法
  generateInterface = async (item: ApiItem) => {
    const resp = await this.request({
      url: YapiUrls.apiInfo,
      params: {
        id: item.id
      }
    })
    const respData = resp?.data?.data
    if (respData && respData?.res_body_is_json_schema && respData?.res_body) {
      try {
        const atiConfigs = this.config
        const paths = respData?.path?.split('/')
        const name: string = paths[paths.length - 1]
        const resBody = JSON.parse(respData.res_body)
        const resSchema = resBody?.properties?.data || resBody
        let reqContent = ''
        let resContent = ''
        let reqName = ''
        let resName = ''
        let reqInterfaceIsExist = false
        if (respData.req_body_type === 'json' && respData.req_body_is_json_schema) {
          reqInterfaceIsExist = true
          const reqBody = JSON.parse(respData.req_body_other)
          const reqSchema = reqBody?.properties?.data || reqBody
          const tempName = respData?.path?.split('/')?.slice(-2)?.join('-')
          // If interface name is `title`, change the interface name
          const interfaceName = this.customInterfaceName(camelCase(tempName), 'request', respData)
          if (reqSchema.title === 'title') {
            reqSchema.title = interfaceName
          }
          reqName = interfaceName
          // interfaceName 就是我要的req名称
          const res = await compile(reqSchema, interfaceName, atiConfigs.json2TsOptions)
          reqContent = parseTsCode(res, removeIndexSignatureMiddleWare)
        }
        if (resSchema) {
          const interfaceName = this.customInterfaceName(camelCase(name), 'response', respData)

          const compileOptions = {
            ...(atiConfigs?.json2TsOptions || {})
          }
          // remove banner if req interface is exist, that mean bannerComment is already add in the file
          if (reqInterfaceIsExist && compileOptions) {
            compileOptions.bannerComment = ''
          }
          // 这里的interfaceName 为出参名称
          resName = interfaceName
          const res = await compile(resSchema, interfaceName, compileOptions)
          resContent = parseTsCode(res, removeIndexSignatureMiddleWare)
        } else {
          consola.error(respData?.path)
          consola.info(`ignore: ${respData.res_body}`)
        }
        await this.writeInterfaceToFile({
          reqContent,
          resContent,
          reqName,
          resName,
          name,
          paths,
          requestPath: item.path
        })
      } catch (err) {
        consola.error(err)
        console.log(respData)
      }
    }
  }

  getGroupId = async () => {
    if (!this.config?.groupId?.length) {
      const resp = await this.request({
        url: YapiUrls.listMenu,
        params: {
          project_id: this.config.projectId
        }
      })
      this.config.groupId = resp?.data?.data?.map((item) => item._id) || []
    }
  }

  // 遍历任务
  generate = async () => {
    await this.getGroupId()
    this.config.groupId?.forEach(async (catId) => {
      const spinner = ora(`id: ${catId} 任务开始\n`).start()
      const resp = await this.request({
        url: YapiUrls.listCat,
        params: { page: 1, limit: 50, catid: catId }
      })
      const list = resp?.data?.data?.list || []
      const apiList = list.map((item) => {
        return {
          path: item.path,
          id: item._id
        }
      })

      if (apiList.length) {
        Promise.all(apiList.map(this.generateInterface)).then(() => {
          spinner.succeed(`id: ${catId} 任务完成`)
        })
      } else {
        spinner.stop()
      }
    })
  }
}

export default YapiGenerator
